/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>

&mt { flavor = "balanced"; };

/ {
    behaviors {
        td_mt: tap_dance_mod_tap {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_MOD_TAP";
            #binding-cells = <0>;
            tapping-term-ms = <80>;
            bindings = <&mt LSHIFT CAPSLOCK>, <&kp LCTRL>;
        };

        td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_0";
            #binding-cells = <0>;
            tapping-term-ms = <80>;
            bindings = <&kp RSHIFT>, <&kp LCTRL>, <&kp ENTER>;
        };
    };

    combos {
        compatible = "zmk,combos";

        r_backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <20 21>;
        };

        r_delete {
            bindings = <&kp DELETE>;
            key-positions = <46 47>;
        };

        l_backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <14 15>;
        };

        l_delete {
            bindings = <&kp DELETE>;
            key-positions = <38 39>;
        };

        l_tab {
            bindings = <&kp TAB>;
            key-positions = <16 17>;
        };

        r_tab {
            bindings = <&kp TAB>;
            key-positions = <18 19>;
        };

        esc {
            bindings = <&kp ESC>;
            key-positions = <13 14>;
        };

        caps {
            bindings = <&caps_word>;
            key-positions = <29 30>;
        };

        r_bkspc_word {
            bindings = <&kp LC(BACKSPACE)>;
            key-positions = <20 21 19>;
        };

        l_bkspc_word {
            bindings = <&kp LC(BACKSPACE)>;
            key-positions = <14 15 16>;
        };

        r_delete_word {
            bindings = <&kp LC(DELETE)>;
            key-positions = <45 46 47>;
        };

        l_delete_word {
            bindings = <&kp LC(DELETE)>;
            key-positions = <40 39 38>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // | CTRL   |A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //                     | ALT  | GUI  | LOWER|  SPACE |  | BSPC  | RAISE| ENTER | GUI   |

            bindings = <
&kp ESC    &kp N1  &kp N2          &kp N3        &kp N4            &kp N5                                         &kp N6           &kp N7             &kp N8       &kp N9          &kp N0         &kp GRAVE
&kp TAB    &kp Q   &kp W           &kp F         &kp P             &kp G                                          &kp J            &kp L              &kp U        &kp Y           &kp SEMICOLON  &kp NON_US_BACKSLASH
&kp LSHFT  &kp A   &mt LEFT_ALT R  &mt LCTRL S   &mt LEFT_SHIFT T  &mt LEFT_WIN D                                 &mt RIGHT_WIN H  &mt RIGHT_SHIFT N  &mt RCTRL E  &mt LEFT_ALT I  &kp O          &kp RIGHT_SHIFT
&kp LCTRL  &kp Z   &kp X           &kp C         &kp V             &kp B           &kp LEFT_WIN  &kp RIGHT_WIN    &kp K            &kp M              &kp COMMA    &kp PERIOD      &kp SLASH      &kp RCTRL
                                   &kp LEFT_WIN  &mo 3             &mo 1           &kp SPACE     &mt RCTRL ENTER  &sl 2            &kp RALT           &kp RALT
            >;

            sensor-bindings = <&inc_dec_kp DOWN UP &inc_dec_kp LC(TAB) LC(LS(TAB))>;
        };

        symbols {
            // ------------------------------------------------------------------------------------------------------------
            // | BTCLR | BT1 | BT2 |  BT3 |  BT4 |  BT5 |                   |      |       |       |      |       |       |
            // |  F1   |  F2 |  F3 |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
            // |   `   |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   ~   |
            // |   |  |  |  | |      |      |  |      |       |  _    |  +   |  {    |   }   |  "|"  |
            //                     |      |      |      |        |  |       |      |       |       |

            bindings = <
&bt BT_CLR  &bt BT_SEL 0      &bt BT_SEL 1       &bt BT_SEL 2          &bt BT_SEL 3           &bt BT_SEL 4                  &kp C_PREV         &kp C_PLAY_PAUSE  &kp C_NEXT    &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &trans
&trans      &kp EXCLAMATION   &kp AT_SIGN        &kp HASH              &kp DOLLAR             &kp PERCENT                   &kp CARET          &kp AMPERSAND     &kp ASTERISK  &kp PLUS              &kp EQUAL             &trans
&trans      &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp MINUS                     &kp APOSTROPHE     &kp PIPE          &kp SLASH     &kp NON_US_BACKSLASH  &trans                &trans
&trans      &trans            &trans             &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp UNDER     &trans  &trans  &kp DOUBLE_QUOTES  &trans            &trans        &trans                &trans                &trans
                                                 &trans                &trans                 &trans        &trans  &trans  &trans             &trans
            >;
        };

        diacritics {
            // ------------------------------------------------------------------------------------------------------------
            // |       |     |     |      |      |      |                   |      |       |       |      |       |       |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |       |
            // |   F1  |  F2 |  F3 |  F4  |  F5  |  F6  |                   |  <-  |   v   |  ^    |  ->  |       |       |
            // |   F7  |  F8 |  F9 |  F10 |  F11 |  F12 |        |  |       |  +   |   -   |   =   |  [   |   ]   |   \   |
            //                     |      |      |      |        |  |       |      |       |       |

            bindings = <
&trans  &trans  &trans            &trans         &trans   &trans                     &ext_power EP_ON  &ext_power EP_OFF  &ext_power EP_TOG  &trans   &trans         &trans
&trans  &kp F1  &kp F2            &kp F3         &kp F4   &kp F5                     &kp F6            &kp F7             &kp F8             &kp F11  &kp F12        &trans
&trans  &trans  &kp LS(NUMBER_6)  &kp LS(GRAVE)  &kp SQT  &kp GRAVE                  &kp LA(TAB)       &kp LG(LEFT)       &trans             &trans   &kp LG(RIGHT)  &trans
&trans  &trans  &trans            &trans         &trans   &trans     &trans  &trans  &kp LC(TAB)       &trans             &trans             &trans   &trans         &trans
                                  &trans         &trans   &trans     &trans  &trans  &trans            &trans             &trans
            >;
        };

        numpad {
            bindings = <
&trans  &trans        &trans        &trans        &trans        &trans                  &trans          &trans        &trans          &trans     &trans  &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5                  &kp NUMBER_6    &kp N7        &kp N8          &kp N9     &kp N0  &trans
&trans  &trans        &trans        &trans        &trans        &trans                  &kp LEFT_ARROW  &kp UP_ARROW  &kp DOWN_ARROW  &kp RIGHT  &trans  &trans
&trans  &trans        &trans        &trans        &trans        &trans  &trans  &trans  &kp PLUS        &kp COMMA     &trans          &trans     &trans  &trans
                                    &trans        &trans        &trans  &trans  &trans  &trans          &trans        &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        number {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
